// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CoalitionData;
//
//    var coalitionInfo = CoalitionInfo.FromJson(jsonString);

namespace CoalitionData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CoalitionInfo
    {
        [JsonProperty("coalitions")]
        public Coalition[] Coalitions { get; set; }
    }

    public partial class Coalition
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("alliances")]
        public Alliance[] Alliances { get; set; }

        [JsonProperty("memberCount")]
        public long MemberCount { get; set; }

        [JsonProperty("corporations")]
        public object[] Corporations { get; set; }
    }

    public partial class Alliance
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("memberCount")]
        public long MemberCount { get; set; }

        [JsonProperty("shortName")]
        public string ShortName { get; set; }
    }

    public partial class CoalitionInfo
    {
        public static CoalitionInfo FromJson(string json) => JsonConvert.DeserializeObject<CoalitionInfo>(json, CoalitionData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CoalitionInfo self) => JsonConvert.SerializeObject(self, CoalitionData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
